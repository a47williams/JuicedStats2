// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // in prod you can set DATABASE_URL to Postgres; Prisma will use that
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?

  // app-specific
  plan      String   @default("FREE") // "FREE" | "SEASON" | "MONTHLY"
  proUntil  DateTime?

  // relations
  accounts  Account[]
  sessions  Session[]
  views     View[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  // next-auth adapter model
  userId                 String
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String?  @db.Text
  access_token           String?  @db.Text
  expires_at             Int?
  token_type             String?
  scope                  String?
  id_token               String?  @db.Text
  session_state          String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  // next-auth adapter model
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  // next-auth adapter model
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model View {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  params    String   // stringified JSON of saved filters
  createdAt DateTime @default(now())

  @@index([userId])
}
