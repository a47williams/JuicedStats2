// prisma/schema.prisma

datasource db {
  provider = "sqlite" // dev DB: SQLite
  url      = env("DATABASE_URL") // e.g. file:./dev.db
}

generator client {
  provider = "prisma-client-js"
}

// NOTE: SQLite does not support Prisma enums or Json types.
// We store `plan` as a String ("FREE" | "PRO") and `params` as a String (JSON string).

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  views    View[]

  plan             String         @default("FREE") // "FREE" | "PRO"
  proUntil         DateTime?
  stripeCustomerId String?
  subscriptions    Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model View {
  id        String   @id @default(cuid())
  userId    String
  name      String
  params    String // JSON string (stringify on write, parse on read)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  status               String?
  currentPeriodEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// prisma/schema.prisma
model View {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  params    String   // stringified JSON
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
